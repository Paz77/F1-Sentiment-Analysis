let i=null,s=null,$="timeline",a=document.getElementById("analyze-btn"),g=null;const m=document.getElementById("round"),E=document.getElementById("session-grid"),z=document.getElementById("sentiment-image");document.getElementById("getting-started");document.getElementById("round-selection");document.getElementById("session-selection");document.getElementById("visualization-selection");document.getElementById("results-card");const v="http://127.0.0.1:5000/api";document.addEventListener("DOMContentLoaded",()=>{console.log("Page loaded, initializing F1 Sentiment Analysis app..");const e=document.querySelectorAll("form");console.log("Forms found on page:",e.length),e.length>0&&e.forEach((o,n)=>{console.log(`Form ${n}:`,o),o.addEventListener("submit",l=>{console.error("FORM SUBMIT DETECTED! This is causing the refresh!"),l.preventDefault()})}),document.addEventListener("click",o=>{const n=o.target;if(n.tagName==="BUTTON"||n.closest("button")){const l=n.tagName==="BUTTON"?n:n.closest("button");console.log("=== BUTTON CLICK DETECTED ==="),console.log("Button ID:",l?.id),console.log("Button type:",l?.type),console.log("Is default prevented?",o.defaultPrevented),console.log("Event phase:",o.eventPhase),console.log("=============================")}},!0),window.addEventListener("beforeunload",o=>{console.error("PAGE IS ABOUT TO REFRESH/RELOAD!"),console.trace("Stack trace:")});const t=document.getElementById("analyze-btn");t&&(console.log("Analyze button found:"),console.log("- Type attribute:",t.type),console.log("- Parent element:",t.parentElement?.tagName),console.log("- Is inside form?",t.closest("form")!==null)),S(),C(),I(),setTimeout(N,1e3)});async function S(){try{console.log("loading races from API..");const e=await fetch(`${v}/races`);if(!e.ok)throw new Error(`HTTP ${e.status}: ${e.statusText}`);const t=await e.json();t.success&&t.races?(console.log("races loaded successfully: ",t.races),k(t.races)):r("Failed to load races: "+(t.error||"Unknown error"))}catch(e){console.error("Error loading races:",e),r("Error connecting to server. Make sure your Flask server is running on port 5000!")}}async function B(e){try{console.log(`loading sessions for round ${e}..`);const o=await(await fetch(`${v}/sessions/${e}`)).json();o.success&&o.sessions?(console.log("Sessions loaded:",o.sessions),A(o.sessions)):r("Failed to load sessions: "+(o.error||"Unknown error"))}catch(t){console.error("Error loading sessions:",t),r("Error loading sessions")}}function T(){const e=document.querySelector('input[name="viz-type"]:checked');return e?e.value:"timeline"}async function L(){if(s){await w();return}}async function w(){if(!(!s||!i)){console.log("=== REAL-TIME ANALYSIS DEBUG ==="),console.log("selectedSession:",s),console.log("currentRound:",i),console.log("selectedVisualizationType:",$),console.log("================================"),a.disabled=!0,a.textContent="Processing real-time data...",P();try{console.log("Starting real-time sentiment analysis..."),console.log(`Real-time analyzing ${s} for round ${i}`);const e=await fetch(`${v}/realtime-analysis/${i}/${s}`,{method:"POST",headers:{"Content-Type":"application/json"}});if(!e.ok)throw new Error(`HTTP ${e.status}: ${e.statusText}`);const t=await e.json();if(console.log("Backend response:",t),console.log("Response structure:",{success:t.success,hasVisualizations:!!t.visualizations,vizCount:t.visualizations?Object.keys(t.visualizations).length:0,message:t.message}),t.success&&t.visualizations){const o=Object.keys(t.visualizations);g=t.visualizations;const n=T();if(t.visualizations[n])f(t.visualizations[n]),console.log(`Displayed selected visualization: ${n}`);else{const u=o[0];f(t.visualizations[u]),console.log(`Selected type ${n} not available, showing ${u}`),c(`Note: ${n} visualization not available, showing ${u} instead.`,"info")}const l=t.stats;c(l?`Analysis completed! Generated ${l.visualizations_generated} visualizations from ${l.post_limit} posts.`:"Real-time analysis completed successfully!","success"),console.log("Available visualizations:",o)}else{const o=t.error||"Unknown error occurred";console.error("API returned error:",o),r("Real-time analysis failed: "+o)}}catch(e){console.error("Error in real-time analysis:",e),e instanceof TypeError&&e.message.includes("fetch")?r("Cannot connect to server. Make sure your Flask server is running!"):e instanceof Error?r(`Real-time analysis failed: ${e.message}`):r("An unexpected error occurred during real-time analysis")}finally{x(),a.disabled=!1,y()}}}function k(e){m.innerHTML='<option value="">select a race..</option>',e.forEach(t=>{const o=document.createElement("option");o.value=t.round,o.textContent=`Round ${t.round}: ${t.name}`,m.appendChild(o)}),console.log(`Added ${e.length} races to dropdown`)}function A(e){E.innerHTML="",s=null,e.forEach(t=>{const o=document.createElement("div");o.className="session-item bg-white p-3 rounded border cursor-pointer hover:bg-gray-50 transition",o.innerHTML=`<input type="radio" name="session" id="session-${t}" class="mr-2">
                                <label for="session-${t}" class="cursor-pointer">${t}</label>`,o.querySelector('input[type="radio"]').addEventListener("change",l=>{l.target.checked&&(s=t,p(2)),y()}),E.appendChild(o)}),console.log(`Created ${e.length} radio buttons`)}function y(){const e=s!==null;a.disabled=!e,e?(a.textContent=`Real-time Analyze ${s}`,a.className="btn-realtime w-full"):(a.textContent="Select session to analyze",a.className="bg-gray-400 text-white px-6 py-3 rounded-lg w-full font-medium cursor-not-allowed")}function f(e){const t=`data:image/png;base64,${e.data}`;z.src=t,z.alt=`${e.type} visualization`,console.log(`Displayed ${e.type} visualization`)}function I(){console.log("=== TESTING RADIO BUTTONS ===");const e=document.querySelectorAll('input[name="viz-type"]');console.log("Found radio buttons:",e.length),e.forEach((o,n)=>{const l=o;console.log(`Radio ${n}: value="${l.value}", checked=${l.checked}`)});const t=document.querySelector('input[name="viz-type"]:checked');console.log("Currently checked:",t?t.value:"none"),console.log("============================")}function C(){m.addEventListener("change",t=>{i=t.target.value,console.log(`race round selected ${i}`),i?(p(2),B(i)):(p(1),E.innerHTML="",s=null,y())}),a?(a.removeEventListener("click",b),a.addEventListener("click",b),console.log("Analyze button event listener attached successfully")):console.error("Analyze button not found!"),document.querySelectorAll('input[name="viz-type"]').forEach(t=>{t.addEventListener("change",()=>{O()})}),console.log("Event listeners set up successfully")}async function b(e){console.log("=== handleAnalyzeClick CALLED ==="),console.log("Event type:",e.type),console.log("Event target:",e.target),console.log("Event currentTarget:",e.currentTarget),console.log("Before preventDefault - defaultPrevented:",e.defaultPrevented),e.preventDefault(),e.stopPropagation(),e.stopImmediatePropagation(),console.log("After preventDefault - defaultPrevented:",e.defaultPrevented),console.log("=================================");const t=e.currentTarget;if(t.disabled){console.log("Button already disabled, ignoring click");return}if(t.disabled=!0,!s||!i){c("Please select a session first!","error"),t.disabled=!1;return}try{console.log("About to call analyzeSentiment..."),await L(),console.log("analyzeSentiment completed successfully"),p(4)}catch(o){console.error("Error during analysis (caught in handleAnalyzeClick):",o),o instanceof Error?r(`Analysis failed: ${o.message}`):r("An unexpected error occurred during analysis");return}finally{console.log("handleAnalyzeClick finally block"),t.disabled=!1,y()}}function r(e){c(e,"error"),console.error("User error:",e)}function R(){console.log("Current state:",{currentRound:i,selectedSession:s,hasAnalyzeButton:!!a,hasRoundSelect:!!m})}function c(e,t="info"){const o=document.createElement("div");o.className=`toast toast-${t}`,o.textContent=e,document.getElementById("toast-container")?.appendChild(o),setTimeout(()=>{o.remove()},5e3)}function d(e){const t=document.getElementById(e);t&&(t.classList.remove("hidden"),t.classList.add("card-visible"),setTimeout(()=>{t.scrollIntoView({behavior:"smooth",block:"start"})}))}function h(e){const t=document.getElementById(e);t&&(t.classList.add("hidden"),t.classList.remove("card-visible"))}function D(e){for(let t=1;t<=4;t++){const o=document.querySelector(`[data-step="${t}"]`),n=document.querySelector(`[data-line="${t}"]`);o&&n&&(t<e?(o.classList.remove("active"),o.classList.add("completed"),n.classList.remove("active"),n.classList.add("completed")):t===e?(o.classList.add("active"),o.classList.remove("completed"),n.classList.add("active"),n.classList.remove("completed")):(o.classList.remove("active","completed"),n.classList.remove("active","completed")))}}function p(e){switch(h("session-selection"),h("visualization-selection"),h("results-card"),e){case 1:break;case 2:d("session-selection");break;case 3:d("session-selection"),d("visualization-selection");break;case 4:d("session-selection"),d("visualization-selection"),d("results-card");break}D(e)}function P(){const e=document.getElementById("results-card");if(e){let t=document.getElementById("realtime-loading");t||(t=document.createElement("div"),t.id="realtime-loading",t.className="text-center py-8",t.innerHTML=`
                <div class="spinner-large"></div>
                <p class="text-white mt-4 f1-subtitle">Scraping Reddit data...</p>
                <p class="text-gray-300 text-sm mt-2">This may take 1-2 minutes</p>
                <div class="progress-steps mt-4">
                    <div class="step active">üîç Scraping posts</div>
                    <div class="step">üß† Processing sentiment</div>
                    <div class="step">üìä Creating visualization</div>
                </div>
            `,e.appendChild(t)),t.classList.remove("hidden")}}function x(){const e=document.getElementById("realtime-loading");e&&e.classList.add("hidden")}function N(){const e=document.getElementById("analyze-btn");e&&(console.log("Button element:",e),console.log("Button type:",e.type),console.log("Button onclick:",e.onclick),console.log("Button form:",e.form),console.log("Button parent form:",e.closest("form")),console.log("Button event listeners cannot be inspected in regular JavaScript"))}async function O(){const e=T();if(g&&g[e]){f(g[e]),console.log(`Switched to ${e} from cache`);return}if(!(!i||!s))try{const t=await fetch(`${v}/visualizations/${i}/${s}?type=${e}`);if(!t.ok){c(`Failed to fetch ${e} visualization`,"error");return}const o=await t.json();o.success&&o.visualizations&&o.visualizations.length>0?(f(o.visualizations[0]),console.log(`Switched to ${e} via DB fetch`)):c(`No ${e} visualization available for this session`,"info")}catch(t){console.error("Error fetching visualization:",t),c(`Error fetching ${e} visualization`,"error")}}window.logCurrentState=R;
